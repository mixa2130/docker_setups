apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-api-deployment
  namespace: coolapp

spec:
  replicas: 2

  # Стратегия обновления
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

  selector: # будет считать своими Pod-ми все Pod-ы с этой меткой
    matchLabels: # метка для группировки
      app: test-api
      version: v1

  template: # Шаблон Pod-в

    metadata: # все создаваемые Pod-ы будет иметь эту метку
      labels:
        app: test-api
        version: v1 #эта метка по которой сможем отслеживать нашу версию

    spec:

      containers:
        - name: test-api-container
          image: k8s-demo-app:0.2.2
          ports:
            - containerPort: 8080

          # Environment
          env:
            - name: APP_HOST
              value: "0.0.0.0"
            - name: APP_PORT
              value: "8080"
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  name: pg-configmap-env
                  key: debug_test
          envFrom:
            - configMapRef:
                name: pg-configmap-env
            - secretRef:
                name: coolap-secret

          # Resources
          resources:
            requests:
              cpu: 150m
              memory: 200Mi
            limits:
              cpu: 300m
              memory: 400Mi

          # Health check
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            failureThreshold: 3
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 3 # количество проваленных попыток
            httpGet: # сама проверка, по HTTP на код 200-399
              path: /health
              port: 8080
            periodSeconds: 10
            successThreshold: 1 # кол-во успешных попыток до сбрасывания failureThreshold
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            initialDelaySeconds: 10 # через сколько после запуска приложения начать проверку

